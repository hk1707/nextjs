{"ast":null,"code":"var _jsxFileName = \"/Users/jenncreighton/Apollo/apollo-client-devtools/development/client/src/ColorSchemeGenerator.js\";\nimport React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_COLOR_SCHEME, GET_RANDOM_COLOR } from './queries';\nimport ColorScheme from './components/ColorScheme';\nconst MODE = {\n  MONOCHROME: \"MONOCHROME\",\n  MONOCHROME_DARK: \"MONOCHROME-DARK\",\n  MONOCHROME_LIGHT: \"MONOCHROME-LIGHT\",\n  ANALOGIC: \"ANALOGIC\",\n  COMPLEMENT: \"COMPLEMENT\",\n  ANALOGIC_COMPLEMENT: \"ANALOGIC-COMPLEMENT\",\n  TRIAD: \"TRIAD\",\n  QUAD: \"QUAD\"\n};\n\nconst ColorSchemeGenerator = () => {\n  var _data$random, _data$random$color, _schemeData$scheme;\n\n  const {\n    data,\n    refetch\n  } = useQuery(GET_RANDOM_COLOR, {\n    fetchPolicy: \"no-cache\"\n  });\n  const {\n    data: schemeData,\n    loading: schemeLoading\n  } = useQuery(GET_COLOR_SCHEME, {\n    variables: {\n      hex: data === null || data === void 0 ? void 0 : (_data$random = data.random) === null || _data$random === void 0 ? void 0 : (_data$random$color = _data$random.color) === null || _data$random$color === void 0 ? void 0 : _data$random$color.hex,\n      mode: MODE.ANALOGIC,\n      count: 4\n    }\n  });\n  useEffect(() => {\n    function onKeyPress(e) {\n      if (e.keyCode == 32) {\n        refetch();\n      }\n    }\n\n    window.addEventListener('keypress', onKeyPress);\n    return () => window.removeEventListener('keypress', onKeyPress);\n  });\n  return /*#__PURE__*/React.createElement(ColorScheme, {\n    colors: schemeData === null || schemeData === void 0 ? void 0 : (_schemeData$scheme = schemeData.scheme) === null || _schemeData$scheme === void 0 ? void 0 : _schemeData$scheme.colors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default ColorSchemeGenerator;","map":{"version":3,"sources":["/Users/jenncreighton/Apollo/apollo-client-devtools/development/client/src/ColorSchemeGenerator.js"],"names":["React","useEffect","useQuery","GET_COLOR_SCHEME","GET_RANDOM_COLOR","ColorScheme","MODE","MONOCHROME","MONOCHROME_DARK","MONOCHROME_LIGHT","ANALOGIC","COMPLEMENT","ANALOGIC_COMPLEMENT","TRIAD","QUAD","ColorSchemeGenerator","data","refetch","fetchPolicy","schemeData","loading","schemeLoading","variables","hex","random","color","mode","count","onKeyPress","e","keyCode","window","addEventListener","removeEventListener","scheme","colors"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,WAAnD;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,UAAU,EAAE,YADD;AAEXC,EAAAA,eAAe,EAAE,iBAFN;AAGXC,EAAAA,gBAAgB,EAAE,kBAHP;AAIXC,EAAAA,QAAQ,EAAE,UAJC;AAKXC,EAAAA,UAAU,EAAE,YALD;AAMXC,EAAAA,mBAAmB,EAAE,qBANV;AAOXC,EAAAA,KAAK,EAAE,OAPI;AAQXC,EAAAA,IAAI,EAAE;AARK,CAAb;;AAWA,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBf,QAAQ,CAACE,gBAAD,EAAmB;AAAEc,IAAAA,WAAW,EAAE;AAAf,GAAnB,CAAlC;AACA,QAAM;AAAEF,IAAAA,IAAI,EAAEG,UAAR;AAAoBC,IAAAA,OAAO,EAAEC;AAA7B,MAA+CnB,QAAQ,CAACC,gBAAD,EAAmB;AAAEmB,IAAAA,SAAS,EAAE;AAC3FC,MAAAA,GAAG,EAAEP,IAAF,aAAEA,IAAF,uCAAEA,IAAI,CAAEQ,MAAR,uEAAE,aAAcC,KAAhB,uDAAE,mBAAqBF,GADiE;AAE3FG,MAAAA,IAAI,EAAEpB,IAAI,CAACI,QAFgF;AAG3FiB,MAAAA,KAAK,EAAE;AAHoF;AAAb,GAAnB,CAA7D;AAMA1B,EAAAA,SAAS,CAAC,MAAM;AACd,aAAS2B,UAAT,CAAoBC,CAApB,EAAuB;AACrB,UAAGA,CAAC,CAACC,OAAF,IAAa,EAAhB,EAAmB;AACjBb,QAAAA,OAAO;AACR;AACF;;AAEDc,IAAAA,MAAM,CAACC,gBAAP,CAAwB,UAAxB,EAAoCJ,UAApC;AACA,WAAO,MAAMG,MAAM,CAACE,mBAAP,CAA2B,UAA3B,EAAuCL,UAAvC,CAAb;AACD,GATQ,CAAT;AAWA,sBACE,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAET,UAAF,aAAEA,UAAF,6CAAEA,UAAU,CAAEe,MAAd,uDAAE,mBAAoBC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CAtBD;;AAwBA,eAAepB,oBAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_COLOR_SCHEME, GET_RANDOM_COLOR } from './queries';\nimport ColorScheme from './components/ColorScheme';\n\nconst MODE = {\n  MONOCHROME: \"MONOCHROME\",\n  MONOCHROME_DARK: \"MONOCHROME-DARK\",\n  MONOCHROME_LIGHT: \"MONOCHROME-LIGHT\",\n  ANALOGIC: \"ANALOGIC\",\n  COMPLEMENT: \"COMPLEMENT\",\n  ANALOGIC_COMPLEMENT: \"ANALOGIC-COMPLEMENT\",\n  TRIAD: \"TRIAD\",\n  QUAD: \"QUAD\",  \n};\n\nconst ColorSchemeGenerator = () => {\n  const { data, refetch } = useQuery(GET_RANDOM_COLOR, { fetchPolicy: \"no-cache\" });\n  const { data: schemeData, loading: schemeLoading } = useQuery(GET_COLOR_SCHEME, { variables: {\n    hex: data?.random?.color?.hex,\n    mode: MODE.ANALOGIC,\n    count: 4,\n  } });\n  \n  useEffect(() => {\n    function onKeyPress(e) {\n      if(e.keyCode == 32){\n        refetch();\n      }\n    }\n\n    window.addEventListener('keypress', onKeyPress);\n    return () => window.removeEventListener('keypress', onKeyPress);\n  });\n\n  return (\n    <ColorScheme colors={schemeData?.scheme?.colors} />\n  );\n};\n\nexport default ColorSchemeGenerator;"]},"metadata":{},"sourceType":"module"}