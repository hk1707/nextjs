/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/extension/devtools/devtools.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Relay.ts":
/*!**********************!*\
  !*** ./src/Relay.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
  The native EventTarget interface is not useable in content scripts in Firefox.
  We import and extend from this simplified class to use the EventTarget functionality we need.
*/
const EventTarget_1 = __importDefault(__webpack_require__(/*! ./extension/EventTarget */ "./src/extension/EventTarget.ts"));
class Relay extends EventTarget_1.default {
    constructor() {
        super(...arguments);
        this.connections = new Map();
        this.addConnection = (name, fn) => {
            function wrappedFn(event) {
                return fn(event.detail);
            }
            ;
            this.addEventListener(name, wrappedFn);
            this.connections.set(name, wrappedFn);
            return () => this.removeConnection(name);
        };
        this.removeConnection = (name) => {
            const fn = this.connections.get(name);
            if (fn) {
                this.removeEventListener(name, fn);
                this.connections.delete(name);
            }
        };
        this.createEvent = (message) => {
            return new CustomEvent(message, { detail: {} });
        };
        this.broadcast = (message) => {
            let event = this.createEvent(message.message);
            if (message === null || message === void 0 ? void 0 : message.to) {
                let destination = message.to;
                event.detail['to'] = destination;
                let nextDestination;
                let remaining;
                // If there are intermediate destinations
                // Example: 'background:tab:window'
                if (destination.includes(':')) {
                    [destination, ...remaining] = message.to.split(':');
                    nextDestination = remaining.join(':');
                }
                if (this.connections.has(destination)) {
                    event = this.createEvent(destination);
                    event.detail['to'] = nextDestination;
                }
            }
            event.detail['message'] = message.message;
            event.detail['payload'] = message.payload;
            this.dispatchEvent(event);
        };
        this.listen = (name, fn) => {
            function wrappedFn(event) {
                return fn(event.detail);
            }
            ;
            this.addEventListener(name, wrappedFn);
            return () => {
                this.removeEventListener(name, wrappedFn);
            };
        };
        this.send = (messageObj) => {
            this.broadcast(messageObj);
        };
        this.forward = (message, newRecipient) => {
            return this.listen(message, messageObj => {
                this.broadcast(Object.assign(Object.assign({}, messageObj), { to: newRecipient }));
            });
        };
    }
}
exports.default = Relay;


/***/ }),

/***/ "./src/extension/EventTarget.ts":
/*!**************************************!*\
  !*** ./src/extension/EventTarget.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class EventTarget {
    constructor() {
        this.listeners = new Map();
    }
    addEventListener(eventType, callback) {
        const isRegistered = this.listeners.has(eventType);
        if (!isRegistered) {
            this.listeners.set(eventType, new Set());
        }
        const listeners = this.listeners.get(eventType);
        listeners.add(callback);
    }
    removeEventListener(eventType, callback) {
        const isRegistered = this.listeners.has(eventType);
        if (isRegistered) {
            const listeners = this.listeners.get(eventType);
            listeners.delete(callback);
        }
    }
    dispatchEvent(event) {
        const isRegistered = this.listeners.has(event === null || event === void 0 ? void 0 : event.type);
        if (isRegistered) {
            const listeners = this.listeners.get(event.type);
            listeners.forEach(listener => listener(event));
        }
    }
}
exports.default = EventTarget;


/***/ }),

/***/ "./src/extension/constants.ts":
/*!************************************!*\
  !*** ./src/extension/constants.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RELOAD_TAB_COMPLETE = exports.RELOADING_TAB = exports.GRAPHIQL_RESPONSE = exports.GRAPHIQL_REQUEST = exports.PANEL_CLOSED = exports.PANEL_OPEN = exports.UPDATE = exports.REQUEST_DATA = exports.ACTION_HOOK_FIRED = exports.CREATE_DEVTOOLS_PANEL = exports.APOLLO_CLIENT_FOUND = exports.FIND_APOLLO_CLIENT = exports.DEVTOOLS_INITIALIZED = exports.REQUEST_TAB_ID = exports.CLIENT_FOUND = void 0;
exports.CLIENT_FOUND = 'client-found';
exports.REQUEST_TAB_ID = 'request-tab-id';
exports.DEVTOOLS_INITIALIZED = 'devtools-initialized';
exports.FIND_APOLLO_CLIENT = 'find-apollo-client';
exports.APOLLO_CLIENT_FOUND = 'apollo-client-found';
exports.CREATE_DEVTOOLS_PANEL = 'create-devtools-panel';
exports.ACTION_HOOK_FIRED = 'action-hook-fired';
exports.REQUEST_DATA = 'request-data';
exports.UPDATE = 'update';
exports.PANEL_OPEN = 'panel-open';
exports.PANEL_CLOSED = 'panel-closed';
exports.GRAPHIQL_REQUEST = 'graphiql-request';
exports.GRAPHIQL_RESPONSE = 'graphiql-response';
exports.RELOADING_TAB = 'reloading-tab';
exports.RELOAD_TAB_COMPLETE = 'reload-tab-complete';


/***/ }),

/***/ "./src/extension/devtools/devtools.ts":
/*!********************************************!*\
  !*** ./src/extension/devtools/devtools.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Relay_1 = __importDefault(__webpack_require__(/*! ../../Relay */ "./src/Relay.ts"));
const constants_1 = __webpack_require__(/*! ../constants */ "./src/extension/constants.ts");
const inspectedTabId = chrome.devtools.inspectedWindow.tabId;
const devtools = new Relay_1.default();
const port = chrome.runtime.connect({
    name: `devtools-${inspectedTabId}`,
});
port.onMessage.addListener(devtools.broadcast);
devtools.addConnection('background', message => {
    port.postMessage(message);
});
function sendMessageToClient(message) {
    devtools.send({
        message,
        to: `background:tab-${inspectedTabId}:client`
    });
}
function startRequestInterval(ms = 500) {
    sendMessageToClient(constants_1.REQUEST_DATA);
    const id = setInterval(sendMessageToClient, ms, constants_1.REQUEST_DATA);
    return () => clearInterval(id);
}
sendMessageToClient(constants_1.DEVTOOLS_INITIALIZED);
let isPanelCreated = false;
let isAppInitialized = false;
devtools.listen(constants_1.CREATE_DEVTOOLS_PANEL, ({ payload }) => {
    if (!isPanelCreated) {
        chrome.devtools.panels.create('Apollo', 'logo_devtools.png', 'panel.html', function (panel) {
            isPanelCreated = true;
            const { queries, mutations, cache } = JSON.parse(payload);
            let removeUpdateListener;
            let removeGraphiQLForward;
            let removeReloadListener;
            let clearRequestInterval;
            let removeGraphiQLListener;
            panel.onShown.addListener(window => {
                sendMessageToClient(constants_1.PANEL_OPEN);
                const { __DEVTOOLS_APPLICATION__: { initialize, writeData, receiveGraphiQLRequests, sendResponseToGraphiQL, handleReload, handleReloadComplete, } } = window;
                if (!isAppInitialized) {
                    initialize();
                    writeData({ queries, mutations, cache: JSON.stringify(cache) });
                    isAppInitialized = true;
                }
                clearRequestInterval = startRequestInterval();
                removeUpdateListener = devtools.listen(constants_1.UPDATE, ({ payload }) => {
                    const { queries, mutations, cache } = JSON.parse(payload);
                    writeData({ queries, mutations, cache: JSON.stringify(cache) });
                });
                // Add connection so client can send to `background:devtools-${inspectedTabId}:graphiql`
                devtools.addConnection('graphiql', sendResponseToGraphiQL);
                removeGraphiQLListener = receiveGraphiQLRequests(({ detail }) => {
                    devtools.broadcast(detail);
                });
                // Forward all GraphiQL requests to the client
                removeGraphiQLForward = devtools.forward(constants_1.GRAPHIQL_REQUEST, `background:tab-${inspectedTabId}:client`);
                // Listen for tab reload from background
                removeReloadListener = devtools.listen(constants_1.RELOADING_TAB, () => {
                    handleReload();
                    clearRequestInterval();
                    const removeListener = devtools.listen(constants_1.RELOAD_TAB_COMPLETE, () => {
                        clearRequestInterval = startRequestInterval();
                        handleReloadComplete();
                        removeListener();
                    });
                });
            });
            panel.onHidden.addListener(() => {
                isPanelCreated = false;
                clearRequestInterval();
                removeGraphiQLForward();
                removeUpdateListener();
                removeReloadListener();
                removeGraphiQLListener();
                devtools.removeConnection('graphiql');
                sendMessageToClient(constants_1.PANEL_CLOSED);
            });
        });
    }
});


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,