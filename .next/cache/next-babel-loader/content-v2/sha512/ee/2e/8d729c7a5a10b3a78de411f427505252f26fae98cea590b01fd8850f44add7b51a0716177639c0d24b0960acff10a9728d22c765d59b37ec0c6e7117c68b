{"ast":null,"code":"import validator from 'validator';\nimport isEmpty from './isEmpty';\nimport config from '../../client-config';\n\nvar validateAndSanitizeCheckoutForm = function validateAndSanitizeCheckoutForm(data) {\n  var errors = {};\n  var sanitizedData = {};\n  /**\n   * Set the firstName value equal to an empty string if user has not entered the firstName, otherwise the Validator.isEmpty() wont work down below.\n   * Note that the isEmpty() here is our custom function defined in is-empty.js and\n   * Validator.isEmpty() down below comes from validator library.\n   * Similarly we do it for for the rest of the fields\n   */\n\n  data.firstName = !isEmpty(data.firstName) ? data.firstName : '';\n  data.lastName = !isEmpty(data.lastName) ? data.lastName : '';\n  data.company = !isEmpty(data.company) ? data.company : '';\n  data.country = !isEmpty(data.country) ? data.country : '';\n  data.address1 = !isEmpty(data.address1) ? data.address1 : '';\n  data.address2 = !isEmpty(data.address2) ? data.address2 : '';\n  data.city = !isEmpty(data.city) ? data.city : '';\n  data.state = !isEmpty(data.state) ? data.state : '';\n  data.postcode = !isEmpty(data.postcode) ? data.postcode : '';\n  data.phone = !isEmpty(data.phone) ? data.phone : '';\n  data.email = !isEmpty(data.email) ? data.email : '';\n  data.createAccount = !isEmpty(data.createAccount) ? data.createAccount : '';\n  data.orderNotes = !isEmpty(data.orderNotes) ? data.orderNotes : '';\n  data.paymentMethod = !isEmpty(data.paymentMethod) ? data.paymentMethod : '';\n  /**\n   * Checks for error if required is true\n   * and adds Error and Sanitized data to the errors and sanitizedData object\n   *\n   * @param {String} fieldName Field name e.g. First name, last name\n   * @param {String} errorContent Error Content to be used in showing error e.g. First Name, Last Name\n   * @param {Integer} min Minimum characters required\n   * @param {Integer} max Maximum characters required\n   * @param {String} type Type e.g. email, phone etc.\n   * @param {boolean} required Required if required is passed as false, it will not validate error and just do sanitization.\n   */\n\n  var addErrorAndSanitizedData = function addErrorAndSanitizedData(fieldName, errorContent, min, max) {\n    var type = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    var required = arguments.length > 5 ? arguments[5] : undefined;\n    var postCodeLocale = config.postCodeLocale ? config.postCodeLocale : '';\n    /**\n     * Please note that this isEmpty() belongs to validator and not our custom function defined above.\n     *\n     * Check for error and if there is no error then sanitize data.\n     */\n\n    if (!validator.isLength(data[fieldName], {\n      min: min,\n      max: max\n    })) {\n      errors[fieldName] = \"\".concat(errorContent, \" must be \").concat(min, \" to \").concat(max, \" characters\");\n    }\n\n    if ('email' === type && !validator.isEmail(data[fieldName])) {\n      errors[fieldName] = \"\".concat(errorContent, \" is not valid\");\n    }\n\n    if ('phone' === type && !validator.isMobilePhone(data[fieldName])) {\n      errors[fieldName] = \"\".concat(errorContent, \" is not valid\");\n    }\n\n    if ('postcode' === type && postCodeLocale && !validator.isPostalCode(data[fieldName], postCodeLocale)) {\n      errors[fieldName] = \"\".concat(errorContent, \" is not valid\");\n    }\n\n    if (required && validator.isEmpty(data[fieldName])) {\n      errors[fieldName] = \"\".concat(errorContent, \" is required\");\n    } // If no errors\n\n\n    if (!errors[fieldName]) {\n      sanitizedData[fieldName] = validator.trim(data[fieldName]);\n      sanitizedData[fieldName] = 'email' === type ? validator.normalizeEmail(sanitizedData[fieldName]) : sanitizedData[fieldName];\n      sanitizedData[fieldName] = validator.escape(sanitizedData[fieldName]);\n    }\n  };\n\n  addErrorAndSanitizedData('firstName', 'First name', 2, 35, 'string', true);\n  addErrorAndSanitizedData('lastName', 'Last name', 2, 35, 'string', true);\n  addErrorAndSanitizedData('company', 'Company Name', 0, 35, 'string', false);\n  addErrorAndSanitizedData('country', 'Country name', 2, 55, 'string', true);\n  addErrorAndSanitizedData('address1', 'Street address line 1', 20, 100, 'string', true);\n  addErrorAndSanitizedData('address2', '', 0, 254, 'string', false);\n  addErrorAndSanitizedData('city', 'City field', 3, 25, 'string', true);\n  addErrorAndSanitizedData('state', 'State/County', 0, 254, 'string', true);\n  addErrorAndSanitizedData('postcode', 'Post code', 2, 9, 'postcode', true);\n  addErrorAndSanitizedData('phone', 'Phone number', 10, 15, 'phone', true);\n  addErrorAndSanitizedData('email', 'Email', 11, 254, 'email', true); // The data.createAccount is a boolean value.\n\n  sanitizedData.createAccount = data.createAccount;\n  addErrorAndSanitizedData('orderNotes', '', 0, 254, 'string', false);\n  addErrorAndSanitizedData('paymentMethod', 'Payment mode field', 2, 50, 'string', true);\n  return {\n    sanitizedData: sanitizedData,\n    errors: errors,\n    isValid: isEmpty(errors)\n  };\n};\n\nexport default validateAndSanitizeCheckoutForm;","map":{"version":3,"sources":["/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/src/validator/checkout.js"],"names":["validator","isEmpty","config","validateAndSanitizeCheckoutForm","data","errors","sanitizedData","firstName","lastName","company","country","address1","address2","city","state","postcode","phone","email","createAccount","orderNotes","paymentMethod","addErrorAndSanitizedData","fieldName","errorContent","min","max","type","required","postCodeLocale","isLength","isEmail","isMobilePhone","isPostalCode","trim","normalizeEmail","escape","isValid"],"mappings":"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","sourcesContent":["import validator from 'validator';\nimport isEmpty from './isEmpty';\nimport config from '../../client-config';\n\n\nconst validateAndSanitizeCheckoutForm = ( data ) => {\n\n\tlet errors = {};\n\tlet sanitizedData = {};\n\n\t/**\n\t * Set the firstName value equal to an empty string if user has not entered the firstName, otherwise the Validator.isEmpty() wont work down below.\n\t * Note that the isEmpty() here is our custom function defined in is-empty.js and\n\t * Validator.isEmpty() down below comes from validator library.\n\t * Similarly we do it for for the rest of the fields\n\t */\n\tdata.firstName = ( ! isEmpty( data.firstName ) ) ? data.firstName : '';\n\tdata.lastName = ( ! isEmpty( data.lastName ) ) ? data.lastName : '';\n\tdata.company = ( ! isEmpty( data.company ) ) ? data.company : '';\n\tdata.country = ( ! isEmpty( data.country ) ) ? data.country : '';\n\tdata.address1 = ( ! isEmpty( data.address1 ) ) ? data.address1 : '';\n\tdata.address2 = ( ! isEmpty( data.address2 ) ) ? data.address2 : '';\n\tdata.city = ( ! isEmpty( data.city ) ) ? data.city : '';\n\tdata.state = ( ! isEmpty( data.state ) ) ? data.state : '';\n\tdata.postcode = ( ! isEmpty( data.postcode ) ) ? data.postcode : '';\n\tdata.phone = ( ! isEmpty( data.phone ) ) ? data.phone : '';\n\tdata.email = ( ! isEmpty( data.email ) ) ? data.email : '';\n\tdata.createAccount = ( ! isEmpty( data.createAccount ) ) ? data.createAccount : '';\n\tdata.orderNotes = ( ! isEmpty( data.orderNotes ) ) ? data.orderNotes : '';\n\tdata.paymentMethod = ( ! isEmpty( data.paymentMethod ) ) ? data.paymentMethod : '';\n\n\t/**\n\t * Checks for error if required is true\n\t * and adds Error and Sanitized data to the errors and sanitizedData object\n\t *\n\t * @param {String} fieldName Field name e.g. First name, last name\n\t * @param {String} errorContent Error Content to be used in showing error e.g. First Name, Last Name\n\t * @param {Integer} min Minimum characters required\n\t * @param {Integer} max Maximum characters required\n\t * @param {String} type Type e.g. email, phone etc.\n\t * @param {boolean} required Required if required is passed as false, it will not validate error and just do sanitization.\n\t */\n\tconst addErrorAndSanitizedData = ( fieldName, errorContent, min, max, type = '', required ) => {\n\n\t\tconst postCodeLocale = config.postCodeLocale ? config.postCodeLocale : '';\n\t\t/**\n\t\t * Please note that this isEmpty() belongs to validator and not our custom function defined above.\n\t\t *\n\t\t * Check for error and if there is no error then sanitize data.\n\t\t */\n\t\tif ( ! validator.isLength( data[ fieldName ], { min, max } ) ){\n\t\t\terrors[ fieldName ] = `${errorContent} must be ${min} to ${max} characters`;\n\t\t}\n\n\t\tif ( 'email' === type && ! validator.isEmail( data[ fieldName ] ) ){\n\t\t\terrors[ fieldName ] = `${errorContent} is not valid`;\n\t\t}\n\n\t\tif ( 'phone' === type && ! validator.isMobilePhone( data[ fieldName ] ) ) {\n\t\t\terrors[ fieldName ] = `${errorContent} is not valid`;\n\t\t}\n\n\t\tif ( 'postcode' === type && postCodeLocale && ! validator.isPostalCode( data[ fieldName ], postCodeLocale ) ) {\n\t\t\terrors[ fieldName ] = `${errorContent} is not valid`;\n\t\t}\n\n\t\tif ( required && validator.isEmpty( data[ fieldName ] ) ) {\n\t\t\terrors[ fieldName ] = `${errorContent} is required`;\n\t\t}\n\n\n\t\t// If no errors\n\t\tif ( ! errors[ fieldName ] ) {\n\t\t\tsanitizedData[ fieldName ] = validator.trim( data[ fieldName ] );\n\t\t\tsanitizedData[ fieldName ] = ( 'email' === type ) ? validator.normalizeEmail( sanitizedData[ fieldName ] ) : sanitizedData[ fieldName ];\n\t\t\tsanitizedData[ fieldName ] = validator.escape( sanitizedData[ fieldName ] );\n\t\t}\n\n\t};\n\n\taddErrorAndSanitizedData( 'firstName', 'First name', 2, 35, 'string', true );\n\taddErrorAndSanitizedData( 'lastName', 'Last name', 2, 35, 'string', true );\n\taddErrorAndSanitizedData( 'company', 'Company Name', 0, 35, 'string', false );\n\taddErrorAndSanitizedData( 'country', 'Country name', 2, 55, 'string', true );\n\taddErrorAndSanitizedData( 'address1', 'Street address line 1', 20, 100,'string',true );\n\taddErrorAndSanitizedData( 'address2', '', 0, 254, 'string', false );\n\taddErrorAndSanitizedData( 'city', 'City field', 3, 25, 'string', true );\n\taddErrorAndSanitizedData( 'state', 'State/County', 0, 254, 'string', true );\n\taddErrorAndSanitizedData( 'postcode', 'Post code', 2, 9, 'postcode', true );\n\taddErrorAndSanitizedData( 'phone', 'Phone number', 10, 15, 'phone', true );\n\taddErrorAndSanitizedData( 'email', 'Email', 11, 254, 'email', true );\n\n\t// The data.createAccount is a boolean value.\n\tsanitizedData.createAccount = data.createAccount;\n\taddErrorAndSanitizedData( 'orderNotes', '', 0, 254, 'string', false );\n\taddErrorAndSanitizedData( 'paymentMethod', 'Payment mode field', 2, 50, 'string', true );\n\n\n\treturn {\n\t\tsanitizedData,\n\t\terrors,\n\t\tisValid: isEmpty( errors )\n\t}\n};\n\nexport default validateAndSanitizeCheckoutForm;\n\n"]},"metadata":{},"sourceType":"module"}