{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState, useContext } from \"react\";\nimport { ApolloProvider, gql, useQuery, useMutation } from '@apollo/client';\nimport { AppContext } from \"../context/AppContext\";\nimport { getFormattedCart, updateCart, addFirstProduct } from \"../../functions\";\nimport Link from \"next/link\";\nimport client from \"../../../components/Apolloclient\"; //import gql from \"graphql-tag\";\n\nimport { v4 } from 'uuid'; //import GET_CART from \"../../queries/get-cart\";\n//import ADD_TO_CART from \"../../mutations/add-to-cart\";\n\nconst ADD_TO_CART = gql`\n  mutation ($input: AddToCartInput!) {\n    __typename\n  addToCart(input: $input) {\n    clientMutationId\n    cartItem {\n      key\n      product {\n        id\n        productId\n        name\n        description\n        type\n        onSale\n        slug\n        averageRating\n        reviewCount\n        image {\n          id\n          sourceUrl\n          altText\n        }\n        galleryImages {\n          nodes {\n            id\n            sourceUrl\n            altText\n          }\n        }\n      }\n      quantity\n      subtotal\n      subtotalTax\n      tax\n      total\n      variation{\n        id\n        variationId\n        name\n        description\n        type\n        onSale\n        price\n        regularPrice\n        salePrice\n        image{\n          id\n          sourceUrl\n          altText\n        }\n        attributes{\n          nodes{\n            id\n            attributeId\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n  }\n`;\nconst GET_CART = gql`\n  query GET_CART {\n    cart {\n      contents {\n        nodes {\n          key\n          product {\n            id\n            productId\n            name\n            description\n            type\n            onSale\n            slug\n            averageRating\n            reviewCount\n            image {\n              id\n                sourceUrl\n                srcSet\n                altText\n                title       \n            }\n            galleryImages {\n              nodes {\n                id\n                sourceUrl\n                srcSet\n                altText\n                title   \n              }\n            }\n\n          }\n          variation {\n            id\n            variationId\n            name\n            description\n            type\n            onSale\n            price\n            regularPrice\n            salePrice\n            image {\n              id\n              sourceUrl\n              srcSet\n              altText\n              title      \n            }\n            attributes {\n              nodes {\n                id\n                name\n                value\n              }\n            }\n          }\n          quantity\n          total\n          subtotal\n          subtotalTax\n        }\n      }\n      appliedCoupons {\n        nodes {\n          id\n          couponId\n          discountType\n          amount\n          dateExpiry\n          products {\n            nodes {\n              id\n            }\n          }\n          productCategories {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n      subtotal\n      subtotalTax\n      shippingTax\n      shippingTotal\n      total\n      totalTax\n      feeTax\n      feeTotal\n      discountTax\n      discountTotal\n    }\n  }\n`;\n\nconst AddToCart = props => {\n  const {\n    product\n  } = props;\n  const productQryInput = {\n    clientMutationId: v4(),\n    // Generate a unique id.\n    productId: product.productId\n  };\n  const {\n    0: cart,\n    1: setCart\n  } = useContext(AppContext);\n  const {\n    0: showViewCart,\n    1: setShowViewCart\n  } = useState(false);\n  const {\n    0: requestError,\n    1: setRequestError\n  } = useState(null);\n  /**\n   * @TODO will update this in future, when required.\n   * Handles adding items to the cart.\n   *\n   * @return {void}\n   */\n\n  const handleAddToCartLocalStorage = () => {\n    // If component is rendered client side.\n    if (false) {\n      let existingCart = localStorage.getItem('woo-next-cart'); // If cart has item(s) already, update existing or add new item.\n\n      if (!existingCart) {\n        existingCart = JSON.parse(existingCart);\n        const qtyToBeAdded = 1;\n        const updatedCart = updateCart(existingCart, product, qtyToBeAdded);\n        setCart(updatedCart);\n      } else {\n        /**\n         * If No Items in the cart, create an empty array and add one.\n         * @type {Array}\n         */\n        const newCart = addFirstProduct(product);\n        setCart(newCart);\n      } // Show View Cart Button\n\n\n      setShowViewCart(true);\n    }\n  }; // Get Cart Data.\n\n\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_CART, {\n    notifyOnNetworkStatusChange: true,\n    onCompleted: () => {\n      //console.warn( 'completed GET_CART' );\n      //\tconsole.log(data)\n      // Update cart in the localStorage.\n      const updatedCart = getFormattedCart(data);\n      localStorage.setItem('woo-next-cart', JSON.stringify(updatedCart)); // Update cart data in React Context.\n\n      setCart(updatedCart);\n    }\n  }); // Add to Cart Mutation.\n\n  const [addToCart, {\n    data: addToCartRes,\n    loading: addToCartLoading,\n    error: addToCartError\n  }] = useMutation(ADD_TO_CART, {\n    variables: {\n      input: productQryInput\n    },\n    onCompleted: () => {\n      // console.warn( 'completed ADD_TO_CART' );\n      //console.log(data)\n      // If error.\n      if (addToCartError) {\n        setRequestError(addToCartError.graphQLErrors[0].message);\n      } // On Success:\n      // 1. Make the GET_CART query to update the cart with new values in React context.\n\n\n      refetch(); // 2. Show View Cart Button\n\n      setShowViewCart(true);\n    },\n    onError: error => {\n      if (error) {\n        setRequestError(error.graphQLErrors[0].message);\n      }\n    }\n  });\n\n  const handleAddToCartClick = () => {\n    //handleAddToCartLocalStorage();\n    setRequestError(null);\n    addToCart();\n  };\n\n  return /*#__PURE__*/_jsx(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      children: [addToCartLoading && /*#__PURE__*/_jsx(\"p\", {\n        children: \"Adding to Cart...\"\n      }), \"ExternalProduct\" === product.__typename ? /*#__PURE__*/_jsx(\"a\", {\n        href: product.externalUrl,\n        target: \"_blank\",\n        className: \"px-3 py-1 rounded-sm mr-3 text-sm border-solid border border-current inline-block hover:bg-purple-600 hover:text-white hover:border-purple-600\",\n        children: \"Buy now\"\n      }) : /*#__PURE__*/_jsx(\"button\", {\n        onClick: handleAddToCartClick,\n        className: \"px-3 py-1 rounded-sm mr-3 text-sm border-solid border border-current hover:bg-purple-600 hover:text-white hover:border-purple-600\",\n        children: \"Add to cart\"\n      }), showViewCart ? /*#__PURE__*/_jsx(Link, {\n        href: \"/cart\",\n        children: /*#__PURE__*/_jsx(\"button\", {\n          className: \"px-3 py-1 rounded-sm text-sm border-solid border border-current inline-block hover:bg-purple-600 hover:text-white hover:border-purple-600\",\n          children: \"View Cart\"\n        })\n      }) : '']\n    })\n  });\n};\n\nexport default AddToCart;","map":null,"metadata":{},"sourceType":"module"}