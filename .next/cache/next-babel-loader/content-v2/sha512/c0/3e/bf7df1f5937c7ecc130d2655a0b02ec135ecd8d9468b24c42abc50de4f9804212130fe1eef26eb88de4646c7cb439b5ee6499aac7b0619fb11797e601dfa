{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//import fetch from \"node-fetch\";\n//import { ApolloClient } from \"apollo-boost\";\n//import { ApolloClient } from \"apollo-client\";\n//import { InMemoryCache } from \"apollo-cache-inmemory\";\n//import { createHttpLink } from \"apollo-link-http\";\nimport clientConfig from \"../clientConfig\";\nimport { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n/* const client = new ApolloClient({\n    link:({\n        uri:clientConfig.graphurl,\n        fetch:fetch    \n    }),\n    cache: new InMemoryCache() \n    \n}); */\n\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n});\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token'); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      authorization: token ? `Bearer ${token}` : \"\"\n    })\n  };\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  uri: clientConfig.graphurl,\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/components/Apolloclient.js"],"names":["clientConfig","ApolloClient","createHttpLink","InMemoryCache","setContext","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","graphurl","cache"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,YAAP,MAAyB,iBAAzB;AACA,SAASC,YAAT,EAAsBC,cAAtB,EAAsCC,aAAtC,QAA2D,gBAA3D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC5BI,EAAAA,GAAG,EAAE;AADuB,CAAD,CAA/B;AAIA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC5C;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAF4C,CAG5C;;AACA,SAAO;AACLH,IAAAA,OAAO,kCACFA,OADE;AAELI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFtC;AADF,GAAP;AAMD,CAVwB,CAA3B;AAaA,MAAMI,MAAM,GAAG,IAAIb,YAAJ,CAAiB;AAC5Bc,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CADsB;AAE5BC,EAAAA,GAAG,EAAEN,YAAY,CAACiB,QAFU;AAG5BC,EAAAA,KAAK,EAAE,IAAIf,aAAJ;AAHqB,CAAjB,CAAf;AAMA,eAAeW,MAAf","sourcesContent":["//import fetch from \"node-fetch\";\n//import { ApolloClient } from \"apollo-boost\";\n//import { ApolloClient } from \"apollo-client\";\n//import { InMemoryCache } from \"apollo-cache-inmemory\";\n//import { createHttpLink } from \"apollo-link-http\";\nimport clientConfig from \"../clientConfig\";\nimport { ApolloClient,createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n\n/* const client = new ApolloClient({\n    link:({\n        uri:clientConfig.graphurl,\n        fetch:fetch    \n    }),\n    cache: new InMemoryCache() \n    \n}); */\n\nconst httpLink = createHttpLink({\n    uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n    // get the authentication token from local storage if it exists\n    const token = localStorage.getItem('token');\n    // return the headers to the context so httpLink can read them\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      }\n    }\n  });\n\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    uri: clientConfig.graphurl,\n    cache: new InMemoryCache()\n});\n\nexport default client;"]},"metadata":{},"sourceType":"module"}