{"ast":null,"code":"const API_URL = \"http://hitesh.demoproject.info/graphql\";\n\nasync function fetchAPI(query, {\n  variables\n} = {}) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error('Failed to fetch API');\n  }\n\n  return json.data;\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(`\n    query PreviewPost($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`, {\n    variables: {\n      id,\n      idType\n    }\n  });\n  return data.page;\n}\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      pages(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : data.pages;\n}\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(`\n    query AllPosts {\n      pages(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            title\n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n              }\n            }\n            author {\n              node {\n                name\n                firstName\n                lastName\n                avatar {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `, {\n    variables: {\n      onlyEnabled: preview,\n      preview\n    }\n  });\n  console.log(data);\n  return data === null || data === void 0 ? void 0 : data.pages;\n}\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  const postPreview = preview && (previewData === null || previewData === void 0 ? void 0 : previewData.page); // The slug may be the id of an unpublished post\n\n  const isId = Number.isInteger(Number(slug));\n  const isSamePost = isId ? Number(slug) === postPreview.id : slug === postPreview.slug;\n  const isDraft = isSamePost && (postPreview === null || postPreview === void 0 ? void 0 : postPreview.status) === 'draft';\n  const isRevision = isSamePost && (postPreview === null || postPreview === void 0 ? void 0 : postPreview.status) === 'publish';\n  const data = await fetchAPI(`\n    fragment AuthorFields on User {\n      name\n      firstName\n      lastName\n      avatar {\n        url\n      }\n    }\n    fragment PostFields on Post {\n      title\n      slug\n      date\n      featuredImage {\n        node {\n          sourceUrl\n        }\n      }\n      author {\n        node {\n          ...AuthorFields\n        }\n      }\n      categories {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n      tags {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n    query PostBySlug($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        ...PostFields\n        content\n        ${// Only some of the fields of a revision are considered as there are some inconsistencies\n  isRevision ? `\n        revisions(first: 1, where: { orderby: { field: MODIFIED, order: DESC } }) {\n          edges {\n            node {\n              title\n              content\n              author {\n                node {\n                  ...AuthorFields\n                }\n              }\n            }\n          }\n        }\n        ` : ''}\n     }\n      pages(first: 3, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            ...PostFields\n          }\n        }\n      }\n    }\n  `, {\n    variables: {\n      id: 348,\n      idType: 'DATABASE_ID'\n    }\n  });\n  return data;\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/lib/pageapi.js"],"names":["API_URL","fetchAPI","query","variables","headers","res","fetch","method","body","JSON","stringify","json","errors","console","error","Error","data","getPreviewPost","id","idType","page","getAllPostsWithSlug","pages","getAllPostsForHome","preview","onlyEnabled","log","getPostAndMorePosts","slug","previewData","postPreview","isId","Number","isInteger","isSamePost","isDraft","status","isRevision"],"mappings":"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","sourcesContent":["const API_URL = \"http://hitesh.demoproject.info/graphql\"\n\nasync function fetchAPI(query, { variables } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const json = await res.json()\n  if (json.errors) {\n    console.error(json.errors)\n    throw new Error('Failed to fetch API')\n  }\n  return json.data\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(\n    `\n    query PreviewPost($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`,\n    {\n      variables: { id, idType },\n    }\n  )\n  return data.page\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      pages(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `)\n  return data?.pages\n}\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(\n    `\n    query AllPosts {\n      pages(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            title\n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n              }\n            }\n            author {\n              node {\n                name\n                firstName\n                lastName\n                avatar {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `,\n    {\n      variables: {\n        onlyEnabled: preview,\n        preview,\n      },\n    }\n  )\n  \n  console.log(data);\n\n  return data?.pages\n}\n\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  const postPreview = preview && previewData?.page\n  // The slug may be the id of an unpublished post\n  const isId = Number.isInteger(Number(slug))\n  const isSamePost = isId\n    ? Number(slug) === postPreview.id\n    : slug === postPreview.slug\n  const isDraft = isSamePost && postPreview?.status === 'draft'\n  const isRevision = isSamePost && postPreview?.status === 'publish'\n  const data = await fetchAPI(\n    `\n    fragment AuthorFields on User {\n      name\n      firstName\n      lastName\n      avatar {\n        url\n      }\n    }\n    fragment PostFields on Post {\n      title\n      slug\n      date\n      featuredImage {\n        node {\n          sourceUrl\n        }\n      }\n      author {\n        node {\n          ...AuthorFields\n        }\n      }\n      categories {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n      tags {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n    query PostBySlug($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        ...PostFields\n        content\n        ${\n          // Only some of the fields of a revision are considered as there are some inconsistencies\n          isRevision\n            ? `\n        revisions(first: 1, where: { orderby: { field: MODIFIED, order: DESC } }) {\n          edges {\n            node {\n              title\n              content\n              author {\n                node {\n                  ...AuthorFields\n                }\n              }\n            }\n          }\n        }\n        `\n            : ''\n        }\n     }\n      pages(first: 3, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            ...PostFields\n          }\n        }\n      }\n    }\n  `,\n    {\n      variables: {\n        id: 348 ,\n        idType: 'DATABASE_ID',\n      },\n    }\n  )\n\n  return data\n}"]},"metadata":{},"sourceType":"module"}