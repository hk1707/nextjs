{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/src/components/cart/cart-page/CartItemsContainer.js\";\nimport Link from 'next/link';\nimport { useContext, useState } from 'react';\nimport { AppContext } from \"../../context/AppContext\";\nimport { getFormattedCart, getUpdatedItems } from '../../../functions';\nimport CartItem from \"./CartItem\";\nimport { v4 } from 'uuid';\nimport { useMutation, useQuery } from '@apollo/client';\nimport UPDATE_CART from \"../../../mutations/update-cart\";\nimport GET_CART from \"../../../queries/get-cart\";\nimport CLEAR_CART_MUTATION from \"../../../mutations/clear-cart\";\nimport { isEmpty } from 'lodash';\n\nconst CartItemsContainer = () => {\n  // @TODO wil use it in future variations of the project.\n  const {\n    0: cart,\n    1: setCart\n  } = useContext(AppContext);\n  const {\n    0: requestError,\n    1: setRequestError\n  } = useState(null); // Get Cart Data.\n\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_CART); // Update Cart Mutation.\n\n  const [updateCart, {\n    data: updateCartResponse,\n    loading: updateCartProcessing,\n    error: updateCartError\n  }] = useMutation(UPDATE_CART, {\n    onCompleted: () => {\n      refetch();\n    },\n    onError: error => {\n      if (error) {\n        var _error$graphQLErrors, _error$graphQLErrors$;\n\n        const errorMessage = error !== null && error !== void 0 && (_error$graphQLErrors = error.graphQLErrors) !== null && _error$graphQLErrors !== void 0 && (_error$graphQLErrors$ = _error$graphQLErrors[0]) !== null && _error$graphQLErrors$ !== void 0 && _error$graphQLErrors$.message ? error.graphQLErrors[0].message : '';\n        setRequestError(errorMessage);\n      }\n    }\n  }); // Update Cart Mutation.\n\n  const [clearCart, {\n    data: clearCartRes,\n    loading: clearCartProcessing,\n    error: clearCartError\n  }] = useMutation(CLEAR_CART_MUTATION, {\n    onCompleted: () => {\n      refetch();\n    },\n    onError: error => {\n      if (error) {\n        var _error$graphQLErrors2, _error$graphQLErrors$2;\n\n        const errorMessage = !isEmpty(error === null || error === void 0 ? void 0 : (_error$graphQLErrors2 = error.graphQLErrors) === null || _error$graphQLErrors2 === void 0 ? void 0 : _error$graphQLErrors2[0]) ? (_error$graphQLErrors$2 = error.graphQLErrors[0]) === null || _error$graphQLErrors$2 === void 0 ? void 0 : _error$graphQLErrors$2.message : '';\n        setRequestError(errorMessage);\n      }\n    }\n  });\n  /*\n   * Handle remove product click.\n   *\n   * @param {Object} event event\n   * @param {Integer} Product Id.\n   *\n   * @return {void}\n   */\n\n  const handleRemoveProductClick = (event, cartKey, products) => {\n    console.log(products);\n    event.stopPropagation();\n\n    if (products.length && products.length != 0) {\n      // By passing the newQty to 0 in updateCart Mutation, it will remove the item.\n      const newQty = 0;\n      const updatedItems = getUpdatedItems(products, newQty, cartKey);\n      updateCart({\n        variables: {\n          input: {\n            clientMutationId: v4(),\n            items: updatedItems\n          }\n        }\n      });\n    }\n  }; // Clear the entire cart.\n\n\n  const handleClearCart = event => {\n    event.stopPropagation();\n\n    if (clearCartProcessing) {\n      return;\n    }\n\n    clearCart({\n      variables: {\n        input: {\n          clientMutationId: v4(),\n          all: true\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart product-cart-container container mx-auto my-32 px-4 xl:px-0\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 3\n  }, this);\n};\n\nexport default CartItemsContainer;","map":{"version":3,"sources":["/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/src/components/cart/cart-page/CartItemsContainer.js"],"names":["Link","useContext","useState","AppContext","getFormattedCart","getUpdatedItems","CartItem","v4","useMutation","useQuery","UPDATE_CART","GET_CART","CLEAR_CART_MUTATION","isEmpty","CartItemsContainer","cart","setCart","requestError","setRequestError","loading","error","data","refetch","updateCart","updateCartResponse","updateCartProcessing","updateCartError","onCompleted","onError","errorMessage","graphQLErrors","message","clearCart","clearCartRes","clearCartProcessing","clearCartError","handleRemoveProductClick","event","cartKey","products","console","log","stopPropagation","length","newQty","updatedItems","variables","input","clientMutationId","items","handleClearCart","all"],"mappings":"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","sourcesContent":["import Link from 'next/link';\nimport { useContext, useState } from 'react';\nimport { AppContext } from \"../../context/AppContext\";\nimport { getFormattedCart, getUpdatedItems } from '../../../functions';\nimport CartItem from \"./CartItem\";\nimport { v4 } from 'uuid';\nimport { useMutation, useQuery } from '@apollo/client';\nimport UPDATE_CART from \"../../../mutations/update-cart\";\nimport GET_CART from \"../../../queries/get-cart\";\nimport CLEAR_CART_MUTATION from \"../../../mutations/clear-cart\";\nimport {isEmpty} from 'lodash'\n\n\nconst CartItemsContainer = () => {\n\n\n\t// @TODO wil use it in future variations of the project.\n\tconst [ cart, setCart ] = useContext( AppContext );\n\tconst [requestError, setRequestError] = useState( null );\n\n\t// Get Cart Data.\n\tconst { loading, error, data, refetch } = useQuery( GET_CART );\n\n\t// Update Cart Mutation.\n\tconst [updateCart, { data: updateCartResponse, loading: updateCartProcessing, error: updateCartError }] = useMutation( UPDATE_CART, {\n\t\tonCompleted: () => {\n\t\t\trefetch();\n\t\t},\n\t\tonError: ( error ) => {\n\t\t\tif ( error ) {\n\t\t\t\tconst errorMessage = error?.graphQLErrors?.[ 0 ]?.message ? error.graphQLErrors[ 0 ].message : '';\n\t\t\t\tsetRequestError( errorMessage );\n\t\t\t}\n\t\t}\n\t} );\n\n\t// Update Cart Mutation.\n\tconst [clearCart, { data: clearCartRes, loading: clearCartProcessing, error: clearCartError }] = useMutation( CLEAR_CART_MUTATION, {\n\t\tonCompleted: () => {\n\t\t\trefetch();\n\t\t},\n\t\tonError: ( error ) => {\n\t\t\tif ( error ) {\n\t\t\t\tconst errorMessage = ! isEmpty(error?.graphQLErrors?.[ 0 ]) ? error.graphQLErrors[ 0 ]?.message : '';\n\t\t\t\tsetRequestError( errorMessage );\n\t\t\t}\n\t\t}\n\t} );\n\n\t/*\n\t * Handle remove product click.\n\t *\n\t * @param {Object} event event\n\t * @param {Integer} Product Id.\n\t *\n\t * @return {void}\n\t */\n\tconst handleRemoveProductClick = ( event, cartKey, products ) => {\n\n\t\tconsole.log(products);\n\n\t\tevent.stopPropagation();\n\t\tif ( products.length  && products.length != 0) {\n\n\t\t\t// By passing the newQty to 0 in updateCart Mutation, it will remove the item.\n\t\t\tconst newQty = 0;\n\t\t\tconst updatedItems = getUpdatedItems( products, newQty, cartKey );\n\n\t\t\tupdateCart( {\n\t\t\t\tvariables: {\n\t\t\t\t\tinput: {\n\t\t\t\t\t\tclientMutationId: v4(),\n\t\t\t\t\t\titems: updatedItems\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t} );\n\t\t}\n\t};\n\n\t// Clear the entire cart.\n\tconst handleClearCart = ( event ) => {\n\n\t\tevent.stopPropagation();\n\n\t\tif ( clearCartProcessing ) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearCart( {\n\t\t\tvariables: {\n\t\t\t\tinput: {\n\t\t\t\t\tclientMutationId: v4(),\n\t\t\t\t\tall: true\n\t\t\t\t}\n\t\t\t},\n\t\t} );\n\t}\n\n\treturn (\n\t\t<div className=\"cart product-cart-container container mx-auto my-32 px-4 xl:px-0\">\n\t\t</div>\n\t);\n};\n\nexport default CartItemsContainer;\n"]},"metadata":{},"sourceType":"module"}