{"ast":null,"code":"import validator from 'validator';\nimport isEmpty from './isEmpty';\nimport config from '../../client-config';\n\nvar validateAndSanitizeCheckoutForm = function validateAndSanitizeCheckoutForm(data) {\n  var errors = {};\n  var sanitizedData = {};\n  /**\n   * Set the firstName value equal to an empty string if user has not entered the firstName, otherwise the Validator.isEmpty() wont work down below.\n   * Note that the isEmpty() here is our custom function defined in is-empty.js and\n   * Validator.isEmpty() down below comes from validator library.\n   * Similarly we do it for for the rest of the fields\n   */\n\n  data.firstName = !isEmpty(data.firstName) ? data.firstName : '';\n  data.lastName = !isEmpty(data.lastName) ? data.lastName : '';\n  data.company = !isEmpty(data.company) ? data.company : '';\n  data.country = !isEmpty(data.country) ? data.country : '';\n  data.address1 = !isEmpty(data.address1) ? data.address1 : '';\n  data.address2 = !isEmpty(data.address2) ? data.address2 : '';\n  data.city = !isEmpty(data.city) ? data.city : '';\n  data.state = !isEmpty(data.state) ? data.state : '';\n  data.postcode = !isEmpty(data.postcode) ? data.postcode : '';\n  data.phone = !isEmpty(data.phone) ? data.phone : '';\n  data.email = !isEmpty(data.email) ? data.email : '';\n  data.createAccount = !isEmpty(data.createAccount) ? data.createAccount : '';\n  data.orderNotes = !isEmpty(data.orderNotes) ? data.orderNotes : '';\n  data.paymentMethod = !isEmpty(data.paymentMethod) ? data.paymentMethod : '';\n  /**\n   * Checks for error if required is true\n   * and adds Error and Sanitized data to the errors and sanitizedData object\n   *\n   * @param {String} fieldName Field name e.g. First name, last name\n   * @param {String} errorContent Error Content to be used in showing error e.g. First Name, Last Name\n   * @param {Integer} min Minimum characters required\n   * @param {Integer} max Maximum characters required\n   * @param {String} type Type e.g. email, phone etc.\n   * @param {boolean} required Required if required is passed as false, it will not validate error and just do sanitization.\n   */\n\n  var addErrorAndSanitizedData = function addErrorAndSanitizedData(fieldName, errorContent, min, max) {\n    var type = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    var required = arguments.length > 5 ? arguments[5] : undefined;\n    var postCodeLocale = config.postCodeLocale ? config.postCodeLocale : '';\n    /**\n     * Please note that this isEmpty() belongs to validator and not our custom function defined above.\n     *\n     * Check for error and if there is no error then sanitize data.\n     */\n\n    if (!validator.isLength(data[fieldName], {\n      min: min,\n      max: max\n    })) {\n      errors[fieldName] = \"\".concat(errorContent, \" must be \").concat(min, \" to \").concat(max, \" characters\");\n    }\n\n    if ('email' === type && !validator.isEmail(data[fieldName])) {\n      errors[fieldName] = \"\".concat(errorContent, \" is not valid\");\n    }\n\n    if ('phone' === type && !validator.isMobilePhone(data[fieldName])) {\n      errors[fieldName] = \"\".concat(errorContent, \" is not valid\");\n    }\n\n    if ('postcode' === type && postCodeLocale && !validator.isPostalCode(data[fieldName], postCodeLocale)) {\n      errors[fieldName] = \"\".concat(errorContent, \" is not valid\");\n    }\n\n    if (required && validator.isEmpty(data[fieldName])) {\n      errors[fieldName] = \"\".concat(errorContent, \" is required\");\n    } // If no errors\n\n\n    if (!errors[fieldName]) {\n      sanitizedData[fieldName] = validator.trim(data[fieldName]);\n      sanitizedData[fieldName] = 'email' === type ? validator.normalizeEmail(sanitizedData[fieldName]) : sanitizedData[fieldName];\n      sanitizedData[fieldName] = validator.escape(sanitizedData[fieldName]);\n    }\n  };\n\n  addErrorAndSanitizedData('firstName', 'First name', 2, 35, 'string', true);\n  addErrorAndSanitizedData('lastName', 'Last name', 2, 35, 'string', true);\n  addErrorAndSanitizedData('company', 'Company Name', 0, 35, 'string', false);\n  addErrorAndSanitizedData('country', 'Country name', 2, 55, 'string', true);\n  addErrorAndSanitizedData('address1', 'Street address line 1', 20, 100, 'string', true);\n  addErrorAndSanitizedData('address2', '', 0, 254, 'string', false);\n  addErrorAndSanitizedData('city', 'City field', 3, 25, 'string', true);\n  addErrorAndSanitizedData('state', 'State/County', 0, 254, 'string', true);\n  addErrorAndSanitizedData('postcode', 'Post code', 2, 9, 'postcode', true);\n  addErrorAndSanitizedData('phone', 'Phone number', 10, 15, 'phone', true);\n  addErrorAndSanitizedData('email', 'Email', 11, 254, 'email', true); // The data.createAccount is a boolean value.\n\n  sanitizedData.createAccount = data.createAccount;\n  addErrorAndSanitizedData('orderNotes', '', 0, 254, 'string', false);\n  addErrorAndSanitizedData('paymentMethod', 'Payment mode field', 2, 50, 'string', true);\n  return {\n    sanitizedData: sanitizedData,\n    errors: errors,\n    isValid: isEmpty(errors)\n  };\n};\n\nexport default validateAndSanitizeCheckoutForm;","map":null,"metadata":{},"sourceType":"module"}