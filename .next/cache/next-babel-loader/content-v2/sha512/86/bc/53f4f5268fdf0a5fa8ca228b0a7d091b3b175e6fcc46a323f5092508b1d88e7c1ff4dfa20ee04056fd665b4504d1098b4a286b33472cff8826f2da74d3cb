{"ast":null,"code":"import fetch from 'node-fetch';\nimport { ApolloClient, ApolloLink, InMemoryCache, createHttpLink } from \"@apollo/client\";\n/**\n * Middleware operation\n * If we have a session token in localStorage, add it to the GraphQL request as a Session header.\n */\n\nexport var middleware = new ApolloLink(function (operation, forward) {\n  /**\n   * If session data exist in local storage, set value as session header.\n   */\n  var session = true ? localStorage.getItem(\"woo-session\") : null;\n\n  if (session) {\n    operation.setContext(function (_ref) {\n      var _ref$headers = _ref.headers,\n          headers = _ref$headers === void 0 ? {} : _ref$headers;\n      return {\n        headers: {\n          \"woocommerce-session\": \"Session \".concat(session)\n        }\n      };\n    });\n  }\n\n  return forward(operation);\n});\n/**\n * Afterware operation.\n *\n * This catches the incoming session token and stores it in localStorage, for future GraphQL requests.\n */\n\nexport var afterware = new ApolloLink(function (operation, forward) {\n  return forward(operation).map(function (response) {\n    /**\n     * Check for session header and update session in local storage accordingly.\n     */\n    var context = operation.getContext();\n    var headers = context.response.headers;\n    var session = headers.get(\"woocommerce-session\");\n\n    if (session) {\n      // Remove session data if session destroyed.\n      if (\"false\" === session) {\n        localStorage.removeItem(\"woo-session\"); // Update session new data if changed.\n      } else if (localStorage.getItem(\"woo-session\") !== session) {\n        localStorage.setItem(\"woo-session\", headers.get(\"woocommerce-session\"));\n      }\n    }\n\n    return response;\n  });\n}); // Apollo GraphQL client.\n\nvar client = new ApolloClient({\n  link: middleware.concat(afterware.concat(createHttpLink({\n    uri: \"\".concat(process.env.NEXT_PUBLIC_WORDPRESS_URL, \"/graphql\"),\n    fetch: fetch\n  }))),\n  cache: new InMemoryCache()\n});\nexport default client;","map":null,"metadata":{},"sourceType":"module"}