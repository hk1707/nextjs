{"ast":null,"code":"import _regeneratorRuntime from \"/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Error from 'next/error';\nvar API_URL = \"http://hitesh.demoproject.info/graphql\";\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        headers,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables;\n            headers = {\n              'Content-Type': 'application/json'\n            };\n            _context.next = 4;\n            return fetch(API_URL, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 4:\n            res = _context.sent;\n            console.log('res ', res);\n            _context.next = 8;\n            return res.json();\n\n          case 8:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 11:\n            return _context.abrupt(\"return\", json.data);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getPreviewPost(_x2) {\n  return _getPreviewPost.apply(this, arguments);\n}\n\nfunction _getPreviewPost() {\n  _getPreviewPost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var idType,\n        data,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            idType = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 'DATABASE_ID';\n            _context2.next = 3;\n            return fetchAPI(\"\\n    query PreviewPost($id: ID!, $idType: PageIdType!) {\\n      page(id: $id, idType: $idType) {\\n        databaseId\\n        slug\\n        status\\n      }\\n    }\", {\n              variables: {\n                id: id,\n                idType: idType\n              }\n            });\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.page);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPreviewPost.apply(this, arguments);\n}\n\nexport function getAllPostsWithSlug() {\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nfunction _getAllPostsWithSlug() {\n  _getAllPostsWithSlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAPI(\"\\n    {\\n      pages(first: 10000) {\\n        edges {\\n          node {\\n            slug\\n          }\\n        }\\n      }\\n    }\\n  \");\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.pages);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nexport function getAllPostsForHome(_x3) {\n  return _getAllPostsForHome.apply(this, arguments);\n}\n\nfunction _getAllPostsForHome() {\n  _getAllPostsForHome = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(preview) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetchAPI(\"\\n    query AllPosts {\\n      pages(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\\n        edges {\\n          node {\\n            title\\n            slug\\n            date\\n            featuredImage {\\n              node {\\n                sourceUrl\\n              }\\n            }\\n            author {\\n              node {\\n                name\\n                firstName\\n                lastName\\n                avatar {\\n                  url\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \", {\n              variables: {\n                onlyEnabled: preview,\n                preview: preview\n              }\n            });\n\n          case 2:\n            data = _context4.sent;\n            console.log(data);\n            return _context4.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.pages);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getAllPostsForHome.apply(this, arguments);\n}\n\nexport function getPostAndMorePosts(_x4, _x5, _x6) {\n  return _getPostAndMorePosts.apply(this, arguments);\n}\n\nfunction _getPostAndMorePosts() {\n  _getPostAndMorePosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(slug, preview, previewData) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return fetchAPI(\"\\n\\n     query PostBySlug($id: ID!, $idType: PageIdType!) {\\n      page(id: $id, idType: $idType) {\\n        parentId\\n        slug\\n        title\\n        content\\n        uri\\n        isFrontPage\\n        isPreview\\n        authorId\\n      }\\n    }\\n      \\n  \", {\n              variables: {\n                id: \"/\".concat(slug),\n                idType: 'URI'\n              }\n            });\n\n          case 2:\n            data = _context5.sent;\n            return _context5.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getPostAndMorePosts.apply(this, arguments);\n}\n\nexport function PRODUCT_BY_SLUG_QUERY() {\n  return _PRODUCT_BY_SLUG_QUERY.apply(this, arguments);\n}\n\nfunction _PRODUCT_BY_SLUG_QUERY() {\n  _PRODUCT_BY_SLUG_QUERY = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return fetchAPI(\"\\n    {\\n      products(first: 5000) {\\n        nodes {\\n          id\\n          slug\\n        }\\n      }\\n    }\\n  \");\n\n          case 2:\n            data = _context6.sent;\n            return _context6.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.products);\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _PRODUCT_BY_SLUG_QUERY.apply(this, arguments);\n}\n\nexport function PRODUCT_SLUGS(_x7) {\n  return _PRODUCT_SLUGS.apply(this, arguments);\n}\n\nfunction _PRODUCT_SLUGS() {\n  _PRODUCT_SLUGS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(slug) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return fetchAPI(\" query singleProduct($id:ID!, $idType:ProductIdTypeEnum!) {\\n      product(id:$id, idType:$idType) {\\n        id\\n        productId\\n        averageRating\\n        slug\\n        description\\n        galleryImages {\\n          nodes {\\n            id\\n            title\\n            altText\\n            mediaItemUrl\\n          }\\n        }\\n        image {\\n          id\\n          uri\\n          title\\n          srcSet\\n          sourceUrl\\n        }\\n        name\\n        ... on SimpleProduct {\\n          price\\n          id\\n          regularPrice\\n        }\\n        ... on VariableProduct {\\n          price\\n          id\\n          regularPrice\\n        }\\n        ... on ExternalProduct {\\n          price\\n          id\\n          regularPrice\\n          externalUrl\\n        }\\n        ... on GroupProduct {\\n          products {\\n            nodes {\\n              ... on SimpleProduct {\\n                id\\n                price\\n                regularPrice\\n              }\\n            }\\n          }\\n          id\\n        }\\n      }\\n    }\\n    \\n  \", {\n              variables: {\n                id: slug,\n                idType: 'SLUG'\n              }\n            });\n\n          case 2:\n            data = _context7.sent;\n            return _context7.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _PRODUCT_SLUGS.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}