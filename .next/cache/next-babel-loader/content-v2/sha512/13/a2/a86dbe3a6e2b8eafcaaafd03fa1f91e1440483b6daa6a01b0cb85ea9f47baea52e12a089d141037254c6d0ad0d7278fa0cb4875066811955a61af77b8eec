{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { v4 } from \"uuid\";\nimport { getUpdatedItems } from \"../../../functions\";\nimport { Cross, Loading } from \"../../icons\";\n\nvar CartItem = function CartItem(_ref) {\n  var item = _ref.item,\n      products = _ref.products,\n      updateCartProcessing = _ref.updateCartProcessing,\n      handleRemoveProductClick = _ref.handleRemoveProductClick,\n      updateCart = _ref.updateCart;\n\n  var _useState = useState(item.qty),\n      productCount = _useState[0],\n      setProductCount = _useState[1];\n  /*\n   * When user changes the qty from product input update the cart in localStorage\n   * Also update the cart in global context\n   *\n   * @param {Object} event event\n   *\n   * @return {void}\n   */\n\n\n  var handleQtyChange = function handleQtyChange(event, cartKey) {\n    if (true) {\n      event.stopPropagation(); // If the previous update cart mutation request is still processing, then return.\n\n      if (updateCartProcessing) {\n        return;\n      } // If the user tries to delete the count of product, set that to 1 by default ( This will not allow him to reduce it less than zero )\n\n\n      var newQty = event.target.value ? parseInt(event.target.value) : 1; // Set the new qty in state.\n\n      setProductCount(newQty);\n\n      if (products.length) {\n        var updatedItems = getUpdatedItems(products, newQty, cartKey);\n        updateCart({\n          variables: {\n            input: {\n              clientMutationId: v4(),\n              items: updatedItems\n            }\n          }\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"tr\", {\n    className: \"woo-next-cart-item\",\n    children: [/*#__PURE__*/_jsx(\"th\", {\n      className: \"woo-next-cart-element woo-next-cart-el-close\",\n      children: /*#__PURE__*/_jsx(\"span\", {\n        className: \"woo-next-cart-close-icon cursor-pointer\",\n        onClick: function onClick(event) {\n          return handleRemoveProductClick(event, item.cartKey, products);\n        },\n        children: /*#__PURE__*/_jsx(Cross, {})\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"woo-next-cart-element\",\n      children: /*#__PURE__*/_jsx(\"img\", {\n        width: \"64\",\n        src: item.image.sourceUrl,\n        srcSet: item.image.srcSet,\n        alt: item.image.title\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"woo-next-cart-element\",\n      children: item.name\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"woo-next-cart-element\",\n      children: 'string' !== typeof item.price ? item.price.toFixed(2) : item.price\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"woo-next-cart-element woo-next-cart-qty\",\n      children: /*#__PURE__*/_jsx(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        \"data-cart-key\": item.cartKey,\n        className: \"woo-next-cart-qty-input form-control \".concat(updateCartProcessing ? 'opacity-25 cursor-not-allowed' : '', \" \"),\n        value: productCount,\n        onChange: function onChange(event) {\n          return handleQtyChange(event, item.cartKey);\n        }\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"woo-next-cart-element\",\n      children: 'string' !== typeof item.totalPrice ? item.totalPrice.toFixed(2) : item.totalPrice\n    })]\n  }, item.productId);\n};\n\nexport default CartItem;","map":null,"metadata":{},"sourceType":"module"}