{"ast":null,"code":"import Error from 'next/error';\nconst API_URL = \"http://hitesh.demoproject.info/graphql\";\n\nasync function fetchAPI(query, {\n  variables\n} = {}) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    return false;\n  }\n\n  return json.data;\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(`\n    query PreviewPost($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`, {\n    variables: {\n      id,\n      idType\n    }\n  });\n  return data.page;\n}\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      pages(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : data.pages;\n}\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(`\n    query AllPosts {\n      pages(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            title\n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n              }\n            }\n            author {\n              node {\n                name\n                firstName\n                lastName\n                avatar {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `, {\n    variables: {\n      onlyEnabled: preview,\n      preview\n    }\n  });\n  console.log(data);\n  return data === null || data === void 0 ? void 0 : data.pages;\n}\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  // const postPreview = preview && previewData?.page\n  // // The slug may be the id of an unpublished post\n  // const isId = Number.isInteger(Number(slug))\n  // const isSamePost = isId\n  //   ? Number(slug) === postPreview.id\n  //   : slug === postPreview.slug\n  // const isDraft = isSamePost && postPreview?.status === 'draft'\n  // const isRevision = isSamePost && postPreview?.status === 'publish'\n  const data = await fetchAPI(`\n\n     query PostBySlug($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        pageId\n        slug\n        title\n        content\n        uri\n        isFrontPage\n        isPreview\n        date\n        authorId\n        author {\n          node {\n            enqueuedStylesheets {\n              edges {\n                node {\n                  id\n                  src\n                }\n              }\n            }\n            enqueuedScripts {\n              edges {\n                node {\n                  id\n                  src\n                }\n              }\n            }\n            name\n            capKey\n          }\n        }\n      }\n    }\n      \n  `, {\n    variables: {\n      id: `/${slug}`,\n      idType: 'URI'\n    }\n  });\n  return data;\n}\nexport async function PRODUCT_BY_SLUG_QUERY() {\n  const data = await fetchAPI(`\n    {\n      products(first: 5000) {\n        nodes {\n          id\n          slug\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : data.products;\n}\nexport async function PRODUCT_SLUGS(slug) {\n  const data = await fetchAPI(` query singleProduct($id:ID!, $idType:ProductIdTypeEnum!) {\n      product(id:$id, idType:$idType) {\n        id\n        productId\n        averageRating\n        slug\n        description\n        galleryImages {\n          nodes {\n            id\n            title\n            altText\n            mediaItemUrl\n          }\n        }\n        image {\n          id\n          uri\n          title\n          srcSet\n          sourceUrl\n        }\n        name\n        ... on SimpleProduct {\n          price\n          id\n          regularPrice\n        }\n        ... on VariableProduct {\n          price\n          id\n          regularPrice\n        }\n        ... on ExternalProduct {\n          price\n          id\n          regularPrice\n          externalUrl\n        }\n        ... on GroupProduct {\n          products {\n            nodes {\n              ... on SimpleProduct {\n                id\n                price\n                regularPrice\n              }\n            }\n          }\n          id\n        }\n      }\n    }\n    \n  `, {\n    variables: {\n      id: slug,\n      idType: 'SLUG'\n    }\n  });\n  return data;\n}","map":null,"metadata":{},"sourceType":"module"}