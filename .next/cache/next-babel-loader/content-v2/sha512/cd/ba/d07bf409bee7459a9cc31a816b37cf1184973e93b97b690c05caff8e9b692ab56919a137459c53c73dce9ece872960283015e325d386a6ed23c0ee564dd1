{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/lib/pageapi.js\";\nconst API_URL = \"http://hitesh.demoproject.info/graphql\";\n\nasync function fetchAPI(query, {\n  variables\n} = {}) {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables\n    })\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    return /*#__PURE__*/_jsxDEV(ErrorPage, {\n      statusCode: 404\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this);\n  }\n\n  return json.data;\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(`\n    query PreviewPost($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`, {\n    variables: {\n      id,\n      idType\n    }\n  });\n  return data.page;\n}\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      pages(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : data.pages;\n}\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(`\n    query AllPosts {\n      pages(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            title\n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n              }\n            }\n            author {\n              node {\n                name\n                firstName\n                lastName\n                avatar {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `, {\n    variables: {\n      onlyEnabled: preview,\n      preview\n    }\n  });\n  console.log(data);\n  return data === null || data === void 0 ? void 0 : data.pages;\n}\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  // const postPreview = preview && previewData?.page\n  // // The slug may be the id of an unpublished post\n  // const isId = Number.isInteger(Number(slug))\n  // const isSamePost = isId\n  //   ? Number(slug) === postPreview.id\n  //   : slug === postPreview.slug\n  // const isDraft = isSamePost && postPreview?.status === 'draft'\n  // const isRevision = isSamePost && postPreview?.status === 'publish'\n  const data = await fetchAPI(`\n\n     query PostBySlug($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        pageId\n        slug\n        title\n        content\n        uri\n        isFrontPage\n        isPreview\n        date\n        authorId\n        author {\n          node {\n            enqueuedStylesheets {\n              edges {\n                node {\n                  id\n                  src\n                }\n              }\n            }\n            enqueuedScripts {\n              edges {\n                node {\n                  id\n                  src\n                }\n              }\n            }\n            name\n            capKey\n          }\n        }\n      }\n    }\n      \n  `, {\n    variables: {\n      id: `/${slug}`,\n      idType: 'URI'\n    }\n  });\n  return data;\n}\nexport async function PRODUCT_BY_SLUG_QUERY() {\n  const data = await fetchAPI(`\n    {\n      products(first: 5000) {\n        nodes {\n          id\n          slug\n        }\n      }\n    }\n  `);\n  return data === null || data === void 0 ? void 0 : data.products;\n}\nexport async function PRODUCT_SLUGS(slug) {\n  const data = await fetchAPI(` query singleProduct($id: ID!, $idType:VisibleProductIdType!) {\n      product(id:'single', idType: $idType) {\n        id\n        productId\n        averageRating\n        slug\n        description\n        galleryImages {\n          nodes {\n            id\n            title\n            altText\n            mediaItemUrl\n          }\n        }\n        image {\n          id\n          uri\n          title\n          srcSet\n          sourceUrl\n        }\n        name\n        ... on SimpleProduct {\n          price\n          id\n          regularPrice\n        }\n        ... on VariableProduct {\n          price\n          id\n          regularPrice\n        }\n        ... on ExternalProduct {\n          price\n          id\n          regularPrice\n          externalUrl\n        }\n        ... on GroupProduct {\n          products {\n            nodes {\n              ... on SimpleProduct {\n                id\n                price\n                regularPrice\n              }\n            }\n          }\n          id\n        }\n      }\n    }\n    \n  `, {\n    variables: {\n      id: 'single',\n      idType: 'SLUG'\n    }\n  });\n  return data;\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/lib/pageapi.js"],"names":["API_URL","fetchAPI","query","variables","headers","res","fetch","method","body","JSON","stringify","json","errors","data","getPreviewPost","id","idType","page","getAllPostsWithSlug","pages","getAllPostsForHome","preview","onlyEnabled","console","log","getPostAndMorePosts","slug","previewData","PRODUCT_BY_SLUG_QUERY","products","PRODUCT_SLUGS"],"mappings":";;AAAA,MAAMA,OAAO,GAAG,wCAAhB;;AAEA,eAAeC,QAAf,CAAwBC,KAAxB,EAA+B;AAAEC,EAAAA;AAAF,IAAgB,EAA/C,EAAmD;AACjD,QAAMC,OAAO,GAAG;AAAE,oBAAgB;AAAlB,GAAhB;AAEA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACN,OAAD,EAAU;AAC/BO,IAAAA,MAAM,EAAE,MADuB;AAE/BH,IAAAA,OAF+B;AAG/BI,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBR,MAAAA,KADmB;AAEnBC,MAAAA;AAFmB,KAAf;AAHyB,GAAV,CAAvB;AASA,QAAMQ,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;;AACA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AAEhB,wBAAO,QAAC,SAAD;AAAW,MAAA,UAAU,EAAE;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAP;AAEA;;AACD,SAAOD,IAAI,CAACE,IAAZ;AACD;;AAED,OAAO,eAAeC,cAAf,CAA8BC,EAA9B,EAAkCC,MAAM,GAAG,aAA3C,EAA0D;AAC/D,QAAMH,IAAI,GAAG,MAAMZ,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA,MAR6B,EASzB;AACEE,IAAAA,SAAS,EAAE;AAAEY,MAAAA,EAAF;AAAMC,MAAAA;AAAN;AADb,GATyB,CAA3B;AAaA,SAAOH,IAAI,CAACI,IAAZ;AACD;AAED,OAAO,eAAeC,mBAAf,GAAqC;AAC1C,QAAML,IAAI,GAAG,MAAMZ,QAAQ,CAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAV6B,CAA3B;AAWA,SAAOY,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEM,KAAb;AACD;AAED,OAAO,eAAeC,kBAAf,CAAkCC,OAAlC,EAA2C;AAChD,QAAMR,IAAI,GAAG,MAAMZ,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA5B6B,EA6BzB;AACEE,IAAAA,SAAS,EAAE;AACTmB,MAAAA,WAAW,EAAED,OADJ;AAETA,MAAAA;AAFS;AADb,GA7ByB,CAA3B;AAqCAE,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AAEA,SAAOA,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEM,KAAb;AACD;AAED,OAAO,eAAeM,mBAAf,CAAmCC,IAAnC,EAAyCL,OAAzC,EAAkDM,WAAlD,EAA+D;AACpE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMd,IAAI,GAAG,MAAMZ,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAvC6B,EAwCzB;AACEE,IAAAA,SAAS,EAAE;AACTY,MAAAA,EAAE,EAAG,IAAGW,IAAK,EADJ;AAETV,MAAAA,MAAM,EAAE;AAFC;AADb,GAxCyB,CAA3B;AAgDA,SAAOH,IAAP;AACD;AAGD,OAAO,eAAee,qBAAf,GAAuC;AAC5C,QAAMf,IAAI,GAAG,MAAMZ,QAAQ,CAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAT6B,CAA3B;AAUA,SAAOY,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEgB,QAAb;AACD;AAED,OAAO,eAAeC,aAAf,CAA6BJ,IAA7B,EAAmC;AAExC,QAAMb,IAAI,GAAG,MAAMZ,QAAQ,CACxB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAvD6B,EAwD3B;AACEE,IAAAA,SAAS,EAAE;AACTY,MAAAA,EAAE,EAAC,QADM;AAETC,MAAAA,MAAM,EAAC;AAFE;AADb,GAxD2B,CAA3B;AAgEA,SAAOH,IAAP;AACD","sourcesContent":["const API_URL = \"http://hitesh.demoproject.info/graphql\"\n\nasync function fetchAPI(query, { variables } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const json = await res.json()\n  if (json.errors) {\n\n   return <ErrorPage statusCode={404} />\n  \n  }\n  return json.data\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(\n    `\n    query PreviewPost($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`,\n    {\n      variables: { id, idType },\n    }\n  )\n  return data.page\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      pages(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `)\n  return data?.pages\n}\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(\n    `\n    query AllPosts {\n      pages(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            title\n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n              }\n            }\n            author {\n              node {\n                name\n                firstName\n                lastName\n                avatar {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `,\n    {\n      variables: {\n        onlyEnabled: preview,\n        preview,\n      },\n    }\n  )\n  \n  console.log(data);\n\n  return data?.pages\n}\n\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  // const postPreview = preview && previewData?.page\n\n  // // The slug may be the id of an unpublished post\n  // const isId = Number.isInteger(Number(slug))\n  // const isSamePost = isId\n  //   ? Number(slug) === postPreview.id\n  //   : slug === postPreview.slug\n  // const isDraft = isSamePost && postPreview?.status === 'draft'\n  // const isRevision = isSamePost && postPreview?.status === 'publish'\n  const data = await fetchAPI(\n    `\n\n     query PostBySlug($id: ID!, $idType: PageIdType!) {\n      page(id: $id, idType: $idType) {\n        pageId\n        slug\n        title\n        content\n        uri\n        isFrontPage\n        isPreview\n        date\n        authorId\n        author {\n          node {\n            enqueuedStylesheets {\n              edges {\n                node {\n                  id\n                  src\n                }\n              }\n            }\n            enqueuedScripts {\n              edges {\n                node {\n                  id\n                  src\n                }\n              }\n            }\n            name\n            capKey\n          }\n        }\n      }\n    }\n      \n  `,\n    {\n      variables: {\n        id: `/${slug}`,\n        idType: 'URI',\n      },\n    }\n  )\n\n  return data\n}\n\n\nexport async function PRODUCT_BY_SLUG_QUERY() {\n  const data = await fetchAPI(`\n    {\n      products(first: 5000) {\n        nodes {\n          id\n          slug\n        }\n      }\n    }\n  `)\n  return data?.products\n}\n\nexport async function PRODUCT_SLUGS(slug) {\n  \n  const data = await fetchAPI(\n    ` query singleProduct($id: ID!, $idType:VisibleProductIdType!) {\n      product(id:'single', idType: $idType) {\n        id\n        productId\n        averageRating\n        slug\n        description\n        galleryImages {\n          nodes {\n            id\n            title\n            altText\n            mediaItemUrl\n          }\n        }\n        image {\n          id\n          uri\n          title\n          srcSet\n          sourceUrl\n        }\n        name\n        ... on SimpleProduct {\n          price\n          id\n          regularPrice\n        }\n        ... on VariableProduct {\n          price\n          id\n          regularPrice\n        }\n        ... on ExternalProduct {\n          price\n          id\n          regularPrice\n          externalUrl\n        }\n        ... on GroupProduct {\n          products {\n            nodes {\n              ... on SimpleProduct {\n                id\n                price\n                regularPrice\n              }\n            }\n          }\n          id\n        }\n      }\n    }\n    \n  `,\n  {\n    variables: {\n      id:'single',\n      idType:'SLUG',\n    },\n  }\n  )\n\n  return data\n}"]},"metadata":{},"sourceType":"module"}