{"ast":null,"code":"import _regeneratorRuntime from \"/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar API_URL = \"http://hitesh.demoproject.info/graphql\";\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        headers,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables;\n            headers = {\n              'Content-Type': 'application/json'\n            };\n            _context.next = 4;\n            return fetch(API_URL, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 11;\n              break;\n            }\n\n            console.error(json.errors);\n            throw new Error('Failed to fetch API');\n\n          case 11:\n            return _context.abrupt(\"return\", json.data);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getPreviewPost(_x2) {\n  return _getPreviewPost.apply(this, arguments);\n}\n\nfunction _getPreviewPost() {\n  _getPreviewPost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var idType,\n        data,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            idType = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 'DATABASE_ID';\n            _context2.next = 3;\n            return fetchAPI(\"\\n    query PreviewPost($id: ID!, $idType: PostIdType!) {\\n      page(id: $id, idType: $idType) {\\n        databaseId\\n        slug\\n        status\\n      }\\n    }\", {\n              variables: {\n                id: id,\n                idType: idType\n              }\n            });\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.post);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPreviewPost.apply(this, arguments);\n}\n\nexport function getAllPostsWithSlug() {\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nfunction _getAllPostsWithSlug() {\n  _getAllPostsWithSlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAPI(\"\\n    {\\n      pages(first: 10000) {\\n        edges {\\n          node {\\n            slug\\n          }\\n        }\\n      }\\n    }\\n  \");\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.posts);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nexport function getAllPostsForHome(_x3) {\n  return _getAllPostsForHome.apply(this, arguments);\n}\n\nfunction _getAllPostsForHome() {\n  _getAllPostsForHome = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(preview) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetchAPI(\"\\n    query AllPosts {\\n      pages(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\\n        edges {\\n          node {\\n            title\\n            slug\\n            date\\n            featuredImage {\\n              node {\\n                sourceUrl\\n              }\\n            }\\n            author {\\n              node {\\n                name\\n                firstName\\n                lastName\\n                avatar {\\n                  url\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \", {\n              variables: {\n                onlyEnabled: preview,\n                preview: preview\n              }\n            });\n\n          case 2:\n            data = _context4.sent;\n            console.log(data);\n            return _context4.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.pages);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getAllPostsForHome.apply(this, arguments);\n}\n\nexport function getPostAndMorePosts(_x4, _x5, _x6) {\n  return _getPostAndMorePosts.apply(this, arguments);\n}\n\nfunction _getPostAndMorePosts() {\n  _getPostAndMorePosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(slug, preview, previewData) {\n    var postPreview, isId, isSamePost, isDraft, isRevision, data, _data$post$revisions$, revision;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            postPreview = preview && (previewData === null || previewData === void 0 ? void 0 : previewData.post); // The slug may be the id of an unpublished post\n\n            isId = Number.isInteger(Number(slug));\n            isSamePost = isId ? Number(slug) === postPreview.id : slug === postPreview.slug;\n            isDraft = isSamePost && (postPreview === null || postPreview === void 0 ? void 0 : postPreview.status) === 'draft';\n            isRevision = isSamePost && (postPreview === null || postPreview === void 0 ? void 0 : postPreview.status) === 'publish';\n            _context5.next = 7;\n            return fetchAPI(\"\\n    fragment AuthorFields on User {\\n      name\\n      firstName\\n      lastName\\n      avatar {\\n        url\\n      }\\n    }\\n    fragment PostFields on Post {\\n      title\\n      excerpt\\n      slug\\n      date\\n      featuredImage {\\n        node {\\n          sourceUrl\\n        }\\n      }\\n      author {\\n        node {\\n          ...AuthorFields\\n        }\\n      }\\n      categories {\\n        edges {\\n          node {\\n            name\\n          }\\n        }\\n      }\\n      tags {\\n        edges {\\n          node {\\n            name\\n          }\\n        }\\n      }\\n    }\\n    query PostBySlug($id: ID!, $idType: PostIdType!) {\\n      page(id: $id, idType: $idType) {\\n        ...PostFields\\n        content\\n        \".concat( // Only some of the fields of a revision are considered as there are some inconsistencies\n            isRevision ? \"\\n        revisions(first: 1, where: { orderby: { field: MODIFIED, order: DESC } }) {\\n          edges {\\n            node {\\n              title\\n              content\\n              author {\\n                node {\\n                  ...AuthorFields\\n                }\\n              }\\n            }\\n          }\\n        }\\n        \" : '', \"\\n      }\\n      pages(first: 3, where: { orderby: { field: DATE, order: DESC } }) {\\n        edges {\\n          node {\\n            ...PostFields\\n          }\\n        }\\n      }\\n    }\\n  \"), {\n              variables: {\n                id: isDraft ? postPreview.id : slug,\n                idType: isDraft ? 'DATABASE_ID' : 'SLUG'\n              }\n            });\n\n          case 7:\n            data = _context5.sent;\n            // Draft posts may not have an slug\n            if (isDraft) data.post.slug = postPreview.id; // Apply a revision (changes in a published post)\n\n            if (isRevision && data.post.revisions) {\n              revision = (_data$post$revisions$ = data.post.revisions.edges[0]) === null || _data$post$revisions$ === void 0 ? void 0 : _data$post$revisions$.node;\n              if (revision) Object.assign(data.post, revision);\n              delete data.post.revisions;\n            } // Filter out the main post\n\n\n            data.posts.edges = data.posts.edges.filter(function (_ref2) {\n              var node = _ref2.node;\n              return node.slug !== slug;\n            }); // If there are still 3 posts, remove the last one\n\n            if (data.posts.edges.length > 2) data.posts.edges.pop();\n            return _context5.abrupt(\"return\", data);\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getPostAndMorePosts.apply(this, arguments);\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/lib/pageapi.js"],"names":["API_URL","fetchAPI","query","variables","headers","fetch","method","body","JSON","stringify","res","json","errors","console","error","Error","data","getPreviewPost","id","idType","post","getAllPostsWithSlug","posts","getAllPostsForHome","preview","onlyEnabled","log","pages","getPostAndMorePosts","slug","previewData","postPreview","isId","Number","isInteger","isSamePost","isDraft","status","isRevision","revisions","revision","edges","node","Object","assign","filter","length","pop"],"mappings":"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","sourcesContent":["const API_URL = \"http://hitesh.demoproject.info/graphql\"\n\nasync function fetchAPI(query, { variables } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const json = await res.json()\n  if (json.errors) {\n    console.error(json.errors)\n    throw new Error('Failed to fetch API')\n  }\n  return json.data\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(\n    `\n    query PreviewPost($id: ID!, $idType: PostIdType!) {\n      page(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`,\n    {\n      variables: { id, idType },\n    }\n  )\n  return data.post\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      pages(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `)\n  return data?.posts\n}\n\nexport async function getAllPostsForHome(preview) {\n  const data = await fetchAPI(\n    `\n    query AllPosts {\n      pages(first: 20, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            title\n            slug\n            date\n            featuredImage {\n              node {\n                sourceUrl\n              }\n            }\n            author {\n              node {\n                name\n                firstName\n                lastName\n                avatar {\n                  url\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `,\n    {\n      variables: {\n        onlyEnabled: preview,\n        preview,\n      },\n    }\n  )\n  \n  console.log(data);\n\n  return data?.pages\n}\n\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  const postPreview = preview && previewData?.post\n  // The slug may be the id of an unpublished post\n  const isId = Number.isInteger(Number(slug))\n  const isSamePost = isId\n    ? Number(slug) === postPreview.id\n    : slug === postPreview.slug\n  const isDraft = isSamePost && postPreview?.status === 'draft'\n  const isRevision = isSamePost && postPreview?.status === 'publish'\n  const data = await fetchAPI(\n    `\n    fragment AuthorFields on User {\n      name\n      firstName\n      lastName\n      avatar {\n        url\n      }\n    }\n    fragment PostFields on Post {\n      title\n      excerpt\n      slug\n      date\n      featuredImage {\n        node {\n          sourceUrl\n        }\n      }\n      author {\n        node {\n          ...AuthorFields\n        }\n      }\n      categories {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n      tags {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n    query PostBySlug($id: ID!, $idType: PostIdType!) {\n      page(id: $id, idType: $idType) {\n        ...PostFields\n        content\n        ${\n          // Only some of the fields of a revision are considered as there are some inconsistencies\n          isRevision\n            ? `\n        revisions(first: 1, where: { orderby: { field: MODIFIED, order: DESC } }) {\n          edges {\n            node {\n              title\n              content\n              author {\n                node {\n                  ...AuthorFields\n                }\n              }\n            }\n          }\n        }\n        `\n            : ''\n        }\n      }\n      pages(first: 3, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            ...PostFields\n          }\n        }\n      }\n    }\n  `,\n    {\n      variables: {\n        id: isDraft ? postPreview.id : slug,\n        idType: isDraft ? 'DATABASE_ID' : 'SLUG',\n      },\n    }\n  )\n\n  // Draft posts may not have an slug\n  if (isDraft) data.post.slug = postPreview.id\n  // Apply a revision (changes in a published post)\n  if (isRevision && data.post.revisions) {\n    const revision = data.post.revisions.edges[0]?.node\n\n    if (revision) Object.assign(data.post, revision)\n    delete data.post.revisions\n  }\n\n  // Filter out the main post\n  data.posts.edges = data.posts.edges.filter(({ node }) => node.slug !== slug)\n  // If there are still 3 posts, remove the last one\n  if (data.posts.edges.length > 2) data.posts.edges.pop()\n\n  return data\n}"]},"metadata":{},"sourceType":"module"}