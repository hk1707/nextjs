{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport Layout from '../../components/Layout';\nimport { useRouter } from 'next/router';\nimport { ApolloProvider } from '@apollo/client';\nimport client from \"../../components/Apolloclient\";\nimport AddToCartButton from '../../src/components/cart/AddToCartButton'; //import {PRODUCT_BY_SLUG_QUERY, PRODUCT_SLUGS} from '../../src/queries/product-by-slug';\n\nimport { PRODUCT_BY_SLUG_QUERY, PRODUCT_SLUGS } from '../../lib/pageapi';\nimport { isEmpty } from 'lodash';\nimport GalleryCarousel from \"../../src/components/single-product/gallery-carousel\";\nimport Price from \"../../src/components/single-product/price\";\nimport ErrorPage from 'next/error';\nexport default function Product(props) {\n  var _product$galleryImage, _product$galleryImage2, _product$image, _product$image2;\n\n  const {\n    product\n  } = props; //console.log(product)\n  //console.log(isEmpty(product))\n\n  const router = useRouter();\n\n  if (router.isFallback && isEmpty(product)) {\n    return /*#__PURE__*/_jsx(ErrorPage, {\n      statusCode: 404\n    });\n  } // If the page is not yet generated, this will be displayed\n  // initially until getStaticProps() finishes running\n\n\n  if (router.isFallback) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"Loading...\"\n    });\n  }\n\n  return /*#__PURE__*/_jsx(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsx(Layout, {\n      children: product ? /*#__PURE__*/_jsx(\"div\", {\n        className: \"single-product container mx-auto my-32 px-4 xl:px-0\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"col\",\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: \"product-images\",\n              children: !isEmpty(product === null || product === void 0 ? void 0 : (_product$galleryImage = product.galleryImages) === null || _product$galleryImage === void 0 ? void 0 : _product$galleryImage.nodes) ? /*#__PURE__*/_jsx(GalleryCarousel, {\n                gallery: product === null || product === void 0 ? void 0 : (_product$galleryImage2 = product.galleryImages) === null || _product$galleryImage2 === void 0 ? void 0 : _product$galleryImage2.nodes\n              }) : !isEmpty(product.image) ? /*#__PURE__*/_jsx(\"img\", {\n                src: product === null || product === void 0 ? void 0 : (_product$image = product.image) === null || _product$image === void 0 ? void 0 : _product$image.sourceUrl,\n                alt: \"Product Image\",\n                width: \"100%\",\n                height: \"auto\",\n                srcSet: product === null || product === void 0 ? void 0 : (_product$image2 = product.image) === null || _product$image2 === void 0 ? void 0 : _product$image2.srcSet\n              }) : null\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"product-info\",\n              children: [/*#__PURE__*/_jsx(\"h4\", {\n                className: \"products-main-title text-2xl uppercase\",\n                children: product.name\n              }), /*#__PURE__*/_jsx(\"div\", {\n                dangerouslySetInnerHTML: {\n                  __html: product.description\n                },\n                className: \"product-description mb-5\"\n              }), /*#__PURE__*/_jsx(Price, {\n                salesPrice: product === null || product === void 0 ? void 0 : product.price,\n                regularPrice: product === null || product === void 0 ? void 0 : product.regularPrice\n              }), /*#__PURE__*/_jsx(AddToCartButton, {\n                product: product\n              })]\n            })]\n          })\n        })\n      }) : ''\n    })\n  });\n}\n;\nexport async function getStaticProps({\n  params,\n  preview = false,\n  previewData\n}) {\n  const data = await PRODUCT_SLUGS(params.slug);\n  return {\n    props: {\n      preview,\n      product: data.product\n    }\n  };\n}\nexport async function getStaticPaths() {\n  const allPosts = await PRODUCT_BY_SLUG_QUERY();\n  return {\n    paths: allPosts.nodes.map(({\n      slug\n    }) => `/product/${slug}`) || [],\n    fallback: true\n  };\n}","map":null,"metadata":{},"sourceType":"module"}