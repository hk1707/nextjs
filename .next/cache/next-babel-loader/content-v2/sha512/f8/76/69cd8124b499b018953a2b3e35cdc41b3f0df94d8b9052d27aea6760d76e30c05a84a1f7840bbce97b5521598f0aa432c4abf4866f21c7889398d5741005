{"ast":null,"code":"import _regeneratorRuntime from \"/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar API_URL = \"http://hitesh.demoproject.info/graphql\";\n\nfunction fetchAPI(_x) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    var _ref,\n        variables,\n        headers,\n        res,\n        json,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, variables = _ref.variables;\n            headers = {\n              'Content-Type': 'application/json'\n            };\n            _context.next = 4;\n            return fetch(API_URL, {\n              method: 'POST',\n              headers: headers,\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              })\n            });\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json.data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getPreviewPost(_x2) {\n  return _getPreviewPost.apply(this, arguments);\n}\n\nfunction _getPreviewPost() {\n  _getPreviewPost = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var idType,\n        data,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            idType = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 'DATABASE_ID';\n            _context2.next = 3;\n            return fetchAPI(\"\\n    query PreviewPost($id: ID!, $idType: PostIdType!) {\\n      page(id: $id, idType: $idType) {\\n        databaseId\\n        slug\\n        status\\n      }\\n    }\", {\n              variables: {\n                id: id,\n                idType: idType\n              }\n            });\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.page);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPreviewPost.apply(this, arguments);\n}\n\nexport function getAllPostsWithSlug() {\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nfunction _getAllPostsWithSlug() {\n  _getAllPostsWithSlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetchAPI(\"\\n    {\\n      pages(first: 10000) {\\n        edges {\\n          node {\\n            slug\\n          }\\n        }\\n      }\\n    }\\n  \");\n\n          case 2:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data === null || data === void 0 ? void 0 : data.pages);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nexport function getPostAndMorePosts(_x3, _x4, _x5) {\n  return _getPostAndMorePosts.apply(this, arguments);\n}\n\nfunction _getPostAndMorePosts() {\n  _getPostAndMorePosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(slug, preview, previewData) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetchAPI(\"\\n      pages(first: 3, where: { orderby: { field: DATE, order: DESC } }) {\\n        edges {\\n          node {\\n            id\\n          }\\n        }\\n      }\\n    }\\n  \");\n\n          case 2:\n            data = _context4.sent;\n            return _context4.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getPostAndMorePosts.apply(this, arguments);\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/wordpress/wp-content/themes/react-next/lib/pageapi.js"],"names":["API_URL","fetchAPI","query","variables","headers","fetch","method","body","JSON","stringify","res","json","data","getPreviewPost","id","idType","page","getAllPostsWithSlug","pages","getPostAndMorePosts","slug","preview","previewData"],"mappings":";;AAAA,IAAMA,OAAO,GAAG,wCAAhB;;SAEeC,Q;;;;;uEAAf,iBAAwBC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2EAA+C,EAA/C,EAAiCC,SAAjC,QAAiCA,SAAjC;AACQC,YAAAA,OADR,GACkB;AAAE,8BAAgB;AAAlB,aADlB;AAAA;AAAA,mBAGoBC,KAAK,CAACL,OAAD,EAAU;AAC/BM,cAAAA,MAAM,EAAE,MADuB;AAE/BF,cAAAA,OAAO,EAAPA,OAF+B;AAG/BG,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,gBAAAA,KAAK,EAALA,KADmB;AAEnBC,gBAAAA,SAAS,EAATA;AAFmB,eAAf;AAHyB,aAAV,CAHzB;;AAAA;AAGQO,YAAAA,GAHR;AAAA;AAAA,mBAYqBA,GAAG,CAACC,IAAJ,EAZrB;;AAAA;AAYQA,YAAAA,IAZR;AAAA,6CAcSA,IAAI,CAACC,IAdd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBA,gBAAsBC,cAAtB;AAAA;AAAA;;;6EAAO,kBAA8BC,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkCC,YAAAA,MAAlC,8DAA2C,aAA3C;AAAA;AAAA,mBACcd,QAAQ,wKASzB;AACEE,cAAAA,SAAS,EAAE;AAAEW,gBAAAA,EAAE,EAAFA,EAAF;AAAMC,gBAAAA,MAAM,EAANA;AAAN;AADb,aATyB,CADtB;;AAAA;AACCH,YAAAA,IADD;AAAA,8CAcEA,IAAI,CAACI,IAdP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAiBP,gBAAsBC,mBAAtB;AAAA;AAAA;;;kFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACchB,QAAQ,yIADtB;;AAAA;AACCW,YAAAA,IADD;AAAA,8CAYEA,IAZF,aAYEA,IAZF,uBAYEA,IAAI,CAAEM,KAZR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBP,gBAAsBC,mBAAtB;AAAA;AAAA;;;kFAAO,kBAAmCC,IAAnC,EAAyCC,OAAzC,EAAkDC,WAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEcrB,QAAQ,8KAFtB;;AAAA;AAECW,YAAAA,IAFD;AAAA,8CAiBEA,IAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["const API_URL = \"http://hitesh.demoproject.info/graphql\"\n\nasync function fetchAPI(query, { variables } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const res = await fetch(API_URL, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify({\n      query,\n      variables,\n    }),\n  })\n\n  const json = await res.json()\n \n  return json.data\n}\n\nexport async function getPreviewPost(id, idType = 'DATABASE_ID') {\n  const data = await fetchAPI(\n    `\n    query PreviewPost($id: ID!, $idType: PostIdType!) {\n      page(id: $id, idType: $idType) {\n        databaseId\n        slug\n        status\n      }\n    }`,\n    {\n      variables: { id, idType },\n    }\n  )\n  return data.page\n}\n\nexport async function getAllPostsWithSlug() {\n  const data = await fetchAPI(`\n    {\n      pages(first: 10000) {\n        edges {\n          node {\n            slug\n          }\n        }\n      }\n    }\n  `)\n  return data?.pages\n}\n\n\nexport async function getPostAndMorePosts(slug, preview, previewData) {\n  \n  const data = await fetchAPI(\n    `\n      pages(first: 3, where: { orderby: { field: DATE, order: DESC } }) {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n  `\n  )\n\n  \n\n  return data\n}"]},"metadata":{},"sourceType":"module"}